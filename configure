#!/bin/sh

echo 
echo "  CMSTkModLab configuration script."
echo

BASEPATH=$PWD
ARCHITECTURE=`uname`
KERNELMAJOR=`uname -r | cut -d . -f 1`
KERNELMINOR=`uname -r | cut -d . -f 2`

NODEFO=0
NOTHERMAL=0
NOASSEMBLY=0
NOPLASMA=0
USEFAKEDEVICES=0
WITHTWITTERSUPPORT=1
CONFIGDEFINES=""

ROOTCFLAGS=`root-config --cflags`
ROOTLIBS=`root-config --libs`
ROOTGLIBS=`root-config --glibs`
ROOTMAJOR=`root-config --version | cut -d . -f 1`

while test $# -gt 0; do 
  case $1 in
    --nodefo)
      NODEFO=1
      ;;
    --nothermal)
      NOTHERMAL=1
      ;;
    --noassembly)
      NOASSEMBLY=1
      ;;
    --noplasma)
      NOPLASMA=1
      ;;
    --notwitter)
      WITHTWITTERSUPPORT=0
      CONFIGDEFINES="$CONFIGDEFINES NO_TWITTER"
      ;;
    --fake)
      USEFAKEDEVICES=1
      CONFIGDEFINES="$CONFIGDEFINES USE_FAKEIO"
      ;;
  *)
    # Call standard parser
    ;;
  esac

  shift
done

QMAKE="qmake"

if test $ARCHITECTURE = "Darwin"; then
    echo Darwin architecture: fake device support forced
    USEFAKEDEVICES=1
    CONFIGDEFINES="USE_FAKEIO"
    SOFLAGS="-m64 -O2 -dynamiclib -single_module -undefined dynamic_lookup"
    CC="clang"
    CXX="clang++"
    LD="clang++"
    QWTDEFINES=""
    QWTINCLUDES="/usr/local/lib/qwt.framework/Headers"
    QWTLIBS="-F/usr/local/lib -framework qwt"
    QMAKE="qmake"
fi
if test $ARCHITECTURE = "Linux" && test $KERNELMAJOR -lt 2 && test $KERNELMINOR -lt 6; then
    echo "Linux kernel minor version < 6: fake device support forced"
    USEFAKEDEVICES=1
    CONFIGDEFINES="USE_FAKEIO"
fi
if test $ARCHITECTURE = "Linux"; then
    SOFLAGS="-shared"
    # Support multiple distros (e.g. Ubuntu (Debian), openSUSE)
    if [ -n "`which qmake 2> /dev/null`" ]; then
        echo Using qmake.
        QMAKE="qmake"
    fi
    if [ -n "`which qmake-qt4 2> /dev/null`" ]; then
        echo Using qmake-qt4
         QMAKE="qmake-qt4"
    fi
    CC="gcc"
    CXX="g++"
    LD="g++"
    # Support multiple distros (e.g. Ubuntu (Debian), openSUSE)
    if [ -n "`locate qwtplot3d-qt4.so`" ]; then
        echo Using Qwt libraries with qt4 suffix.
        QWTDEFINES="QWT_QT4"
        QWTINCLUDES="/usr/include/qwtplot3d-qt4"
        QWTLIBS="-lqwtplot3d-qt4"
    else
        echo Using Qwt libraries without qt4 suffix.
        QWTDEFINES=""
        QWTINCLUDES="/usr/include/qwtplot3d"
        QWTLIBS="-lqwtplot3d"
    fi
    QWTINCLUDES="/usr/include/qwt $QWTINCLUDES"
    QWTLIBS="-lqwt $QWTLIBS -lGL -lGLU"
fi

if test $USEFAKEDEVICES = 1; then
    echo build with fake device support
else
    echo build with real device support
fi
if test $NODEFO = 1; then
    echo build without DEFO support
else
    echo build with DEFO support
fi
if test $NOTHERMAL = 1; then
    echo build without THERMAL support
else
    echo build with THERMAL support
fi
if test $NOASSEMBLY = 1; then
    echo build without ASSEMBLY support
else
    echo build with ASSEMBLY support
fi
if test $NOPLASMA = 1; then
    echo build without Plasma Cleaner support
else
    echo build with Plasma Cleaner support
fi

SED_VARIABLES="BASEPATH ARCHITECTURE KERNELMAJOR KERNELMINOR QMAKE CXX CC LD NODEFO NOTHERMAL NOASSEMBLY NOPLASMA APPLICATIONVERSIONSTR USEFAKEDEVICES WITHTWITTERSUPPORT SOFLAGS CONFIGDEFINES QWTDEFINES QWTINCLUDES QWTLIBS ROOTCFLAGS ROOTLIBS ROOTGLIBS ROOTMAJOR"

echo "#!/bin/sh
dest=\`basename \$1 .in\`
sed \\" > config.status

for key in $SED_VARIABLES; do
  eval key_value='"$'${key}'"'
  key_lower=`echo $key | awk '{print tolower($1)}'`
  echo "   -e 's?@$key_lower@?$key_value?g' \\" >> config.status
done
echo "   < \$1 > \$dest" >> config.status
chmod +x config.status

echo ""
echo -n 'running config.status ..... '
served_dirs=
ROOTDIR=`pwd`
for a in `find . -name '*.in' -print`; do
  if test `basename $a` = "Makefile.in"; then
    served_dirs="$served_dirs `dirname $a` "
  fi
  cd `dirname $a`
  $ROOTDIR/config.status `basename $a`
  cd $ROOTDIR
done
echo done.
