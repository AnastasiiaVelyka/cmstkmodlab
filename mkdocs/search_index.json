{
    "docs": [
        {
            "location": "/", 
            "text": "", 
            "title": "Home"
        }, 
        {
            "location": "/build/", 
            "text": "", 
            "title": "Build"
        }, 
        {
            "location": "/thermo/thermoDAQ/", 
            "text": "", 
            "title": "thermoDAQ"
        }, 
        {
            "location": "/defo/defoDAQ/", 
            "text": "", 
            "title": "defoDAQ"
        }, 
        {
            "location": "/defo/defoDAQScripting/", 
            "text": "defoDAQ Scripting\n\n\ndefo\n\n\n\n\n\n\ndefo.wait(int delay);\n\npause execution of script for delay seconds\n\n\n\n\n\n\ndefo.message(message);\n\nprint a message to the message log. Message can be of type int, uint, double\nor string.\n\n\n\n\n\n\ndefo.newMeasurement();\n\nprepare DAQ for a new measurement\n\n\n\n\n\n\nuint defo.uTime();\n\nreturns the current unix time\n\n\n\n\n\n\nuint defo.mkUTime( int year, int month, int day, int hour, int minute, int second );\n\nconstructs and returns a unix time from the provided parameters.\n\n\n\n\n\n\nkeithley\n\n\n\n\n\n\nint keithley.state( uint channel = [0,9] );\n\nreturns the state of a sensor.\n\n\n\n\n\n\ndouble keithley.temperature( uint channel = [0,9] );\n\nreturns the temperature reading of a sensor.\n\n\n\n\n\n\nstring keithley.temperatureAsString( uint channel = [0,9] );\n\nreturns the temperature reading of a sensor as a string.\n\n\n\n\n\n\nkeithley.waitForStableTemperature( string channels, int timeout );\n\nwait for stable temperatures on the selected channels. wait at most\ntimeout seconds. Channels are to be provided as 'space' separated list\nof integers.\n\n\n\n\n\n\nkeithley.waitForTemperatureBelow( uint channel= [0,9], float temperature, int timeout )\n\nwait for the temperature reading of a channel to be above a certain\ntemperature. Wait at most timeout seconds.\n\n\n\n\n\n\nkeithley.waitForTemperatureAbove( uint channel= [0,9] , float temperature, int timeout )\n\nwait for the temperature reading of a channel to be above a certain\ntemperature. Wait at most timeout seconds.\n\n\n\n\n\n\nconrad\n\n\n\n\n\n\nconrad.enablePanel( uint panel = [1,5] )\n\nswitches on a panel.\n\n\n\n\n\n\nconrad.disablePanel( uint panel = [1,5] )\n\nswitches off a panel.\n\n\n\n\n\n\nint conrad.panelState( uint panel = [1,5] )\n\nreturns the status of a panel.\n\n\n\n\n\n\nconrad.enableCalibrationLEDs()\n\nswitches on the calibration LEDs\n\n\n\n\n\n\nconrad.disableCalibrationLEDs()\n\nswitches off the calibration LEDs\n\n\n\n\n\n\nint conrad.calibrationLEDsState()\n\nreturns the status of calibration LEDs\n\n\n\n\n\n\ncamera\n\n\n\n\n\n\ncamera.comment( string text )\n\nsets the comment text for the picture acquisition. the comment text will not be\ncleared after an picture has been taken\n\n\n\n\n\n\ncamera.takePicture()\n\ntake a new picture\n\n\n\n\n\n\ncamera.setNumberOfPictures(int count = [1,5] )\n\nchanges the number of pictures taken per measurement\n\n\n\n\n\n\nint camera.numberOfPictures()\n\nreturns the number of pictures taken per measurement\n\n\n\n\n\n\njulabo\n\n\n\n\n\n\njulabo.enableCirculator()\n\nswitches circulator on\n\n\n\n\n\n\njulabo.disableCirculator()\n\nswitches circulator off\n\n\n\n\n\n\nint julabo.circulatorState()\n\nreturns the state of the circulator\n\n\n\n\n\n\njulabo.setWorkingTemperature( double temperature = [-50,30] )\n\nset the working temperature\n\n\n\n\n\n\njulabo.workingTemperature()\n\nreturns the working temperature\n\n\n\n\n\n\njulabo.bath()\n\nreturns the bath temperature\n\n\n\n\n\n\njulabo.safety()\n\nreturns the safety temperature\n\n\n\n\n\n\njulabo.setP( double xp = [0.1,99.9] )\n\nset new proportional PID controller parameter\n\n\n\n\n\n\njulabo.setI( int tn = [3,9999] )\n\nset new integral PID controller parameter\n\n\n\n\n\n\njulabo.setD( int tv = [0,999] )\n\nset new differential PID controller parameter\n\n\n\n\n\n\njulabo.setPID( double xp = [0.1,99.9], int tn = [3,9999], int tv = [0,999] )\n\nset new PID controller parameters\n\n\n\n\n\n\ndouble julabo.getP()\n\nreturns proportional PID controller parameter\n\n\n\n\n\n\nint julabo.getI()\n\nreturns integral PID controller parameter\n\n\n\n\n\n\nint julabo.getD()\n\nreturns differential PID controller parameter\n\n\n\n\n\n\njulabo.setPumpPressure( uint pressure = [1,4] )\n\nchanges the pump pressure\n\n\n\n\n\n\nuint julabo.pumpPressure()\n\nreturns the pump pressure", 
            "title": "defoDAQ Scripting"
        }, 
        {
            "location": "/defo/defoDAQScripting/#defodaq-scripting", 
            "text": "", 
            "title": "defoDAQ Scripting"
        }, 
        {
            "location": "/defo/defoDAQScripting/#defo", 
            "text": "defo.wait(int delay); \npause execution of script for delay seconds    defo.message(message); \nprint a message to the message log. Message can be of type int, uint, double\nor string.    defo.newMeasurement(); \nprepare DAQ for a new measurement    uint defo.uTime(); \nreturns the current unix time    uint defo.mkUTime( int year, int month, int day, int hour, int minute, int second ); \nconstructs and returns a unix time from the provided parameters.", 
            "title": "defo"
        }, 
        {
            "location": "/defo/defoDAQScripting/#keithley", 
            "text": "int keithley.state( uint channel = [0,9] ); \nreturns the state of a sensor.    double keithley.temperature( uint channel = [0,9] ); \nreturns the temperature reading of a sensor.    string keithley.temperatureAsString( uint channel = [0,9] ); \nreturns the temperature reading of a sensor as a string.    keithley.waitForStableTemperature( string channels, int timeout ); \nwait for stable temperatures on the selected channels. wait at most\ntimeout seconds. Channels are to be provided as 'space' separated list\nof integers.    keithley.waitForTemperatureBelow( uint channel= [0,9], float temperature, int timeout ) \nwait for the temperature reading of a channel to be above a certain\ntemperature. Wait at most timeout seconds.    keithley.waitForTemperatureAbove( uint channel= [0,9] , float temperature, int timeout ) \nwait for the temperature reading of a channel to be above a certain\ntemperature. Wait at most timeout seconds.", 
            "title": "keithley"
        }, 
        {
            "location": "/defo/defoDAQScripting/#conrad", 
            "text": "conrad.enablePanel( uint panel = [1,5] ) \nswitches on a panel.    conrad.disablePanel( uint panel = [1,5] ) \nswitches off a panel.    int conrad.panelState( uint panel = [1,5] ) \nreturns the status of a panel.    conrad.enableCalibrationLEDs() \nswitches on the calibration LEDs    conrad.disableCalibrationLEDs() \nswitches off the calibration LEDs    int conrad.calibrationLEDsState() \nreturns the status of calibration LEDs", 
            "title": "conrad"
        }, 
        {
            "location": "/defo/defoDAQScripting/#camera", 
            "text": "camera.comment( string text ) \nsets the comment text for the picture acquisition. the comment text will not be\ncleared after an picture has been taken    camera.takePicture() \ntake a new picture    camera.setNumberOfPictures(int count = [1,5] ) \nchanges the number of pictures taken per measurement    int camera.numberOfPictures() \nreturns the number of pictures taken per measurement", 
            "title": "camera"
        }, 
        {
            "location": "/defo/defoDAQScripting/#julabo", 
            "text": "julabo.enableCirculator() \nswitches circulator on    julabo.disableCirculator() \nswitches circulator off    int julabo.circulatorState() \nreturns the state of the circulator    julabo.setWorkingTemperature( double temperature = [-50,30] ) \nset the working temperature    julabo.workingTemperature() \nreturns the working temperature    julabo.bath() \nreturns the bath temperature    julabo.safety() \nreturns the safety temperature    julabo.setP( double xp = [0.1,99.9] ) \nset new proportional PID controller parameter    julabo.setI( int tn = [3,9999] ) \nset new integral PID controller parameter    julabo.setD( int tv = [0,999] ) \nset new differential PID controller parameter    julabo.setPID( double xp = [0.1,99.9], int tn = [3,9999], int tv = [0,999] ) \nset new PID controller parameters    double julabo.getP() \nreturns proportional PID controller parameter    int julabo.getI() \nreturns integral PID controller parameter    int julabo.getD() \nreturns differential PID controller parameter    julabo.setPumpPressure( uint pressure = [1,4] ) \nchanges the pump pressure    uint julabo.pumpPressure() \nreturns the pump pressure", 
            "title": "julabo"
        }, 
        {
            "location": "/", 
            "text": "", 
            "title": "Assembly"
        }
    ]
}