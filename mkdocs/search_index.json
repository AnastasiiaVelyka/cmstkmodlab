{
    "docs": [
        {
            "location": "/", 
            "text": "", 
            "title": "Home"
        }, 
        {
            "location": "/build/configure/", 
            "text": "Main Configuration Script\n\n\n\n\n\n\n--nodefo\n\nDo not build code related to optical deformation setup (ODM).\n\n\n\n\n\n\n--nothermal\n\nDo not build code related to the thermal measurement setup.\n\n\n\n\n\n\n--noassembly\n\nDo not build code related to the automated module assembly setup.\n\n\n\n\n\n\n--notwitter\n\nDo not build with twitter support (only used by thermal measurement software).\n\n\n\n\n\n\n--fake\n\nBuild with fake device support", 
            "title": "configure"
        }, 
        {
            "location": "/build/configure/#main-configuration-script", 
            "text": "--nodefo \nDo not build code related to optical deformation setup (ODM).    --nothermal \nDo not build code related to the thermal measurement setup.    --noassembly \nDo not build code related to the automated module assembly setup.    --notwitter \nDo not build with twitter support (only used by thermal measurement software).    --fake \nBuild with fake device support", 
            "title": "Main Configuration Script"
        }, 
        {
            "location": "/build/UbuntuLinux/", 
            "text": "Build Instructions for Ubuntu Linux (16.04)\n\n\nRequirements\n\n\nThe software relies on package version not available in a standard Ubuntu installation.\nIn order to get the latest versions of the installed packages edit the file\n\nsudo pico /etc/apt/sources.list\n and add the line\n\n\ndeb http://archive.ubuntu.com/ubuntu/ xenial-proposed restricted main multiverse universe\n\n\nto its end. After that execute\n\n\nsudo apt-get update\n\n   \nsudo apt-get upgrade\n\n\non the command line. You can now install the required packages via\n\n\nsudo apt-get install git\n\n   \nsudo apt-get install cmake\n\n   \nsudo apt-get install root-system\n\n   \nsudo apt-get install gcc\n\n   \nsudo apt-get install locate\n\n   \nsudo apt-get install libqt4-dev\n\n   \nsudo apt-get install libqwt-dev\n\n   \nsudo apt-get install libqwtplot3d-qt4-dev\n\n   \nsudo apt-get install libgphoto2-dev\n\n   \nsudo apt-get install libexiv2-dev\n\n   \nsudo apt-get install libopencv-dev\n\n   \nsudo apt-get install pkg-config\n\n   \nsudo apt-get install libboost-dev\n\n   \nsudo apt-get install libcurl3-nss\n\n\nBuilding\n\n\nGo to the directory to which you checked out the source code and run\n\n\n./configure\n [options]\n\n\nwith options as described in the \ndocumentation\n.\n\n\nThen run\n\n\nsource tkmodlabenv.sh\n\n\nin case you use \nbash\n or add the script to your \n.bashrc\n. You should\nnow be good to go and build the software by running\n\n\nmake", 
            "title": "Ubuntu Linux"
        }, 
        {
            "location": "/build/UbuntuLinux/#build-instructions-for-ubuntu-linux-1604", 
            "text": "", 
            "title": "Build Instructions for Ubuntu Linux (16.04)"
        }, 
        {
            "location": "/build/UbuntuLinux/#requirements", 
            "text": "The software relies on package version not available in a standard Ubuntu installation.\nIn order to get the latest versions of the installed packages edit the file sudo pico /etc/apt/sources.list  and add the line  deb http://archive.ubuntu.com/ubuntu/ xenial-proposed restricted main multiverse universe  to its end. After that execute  sudo apt-get update \n    sudo apt-get upgrade  on the command line. You can now install the required packages via  sudo apt-get install git \n    sudo apt-get install cmake \n    sudo apt-get install root-system \n    sudo apt-get install gcc \n    sudo apt-get install locate \n    sudo apt-get install libqt4-dev \n    sudo apt-get install libqwt-dev \n    sudo apt-get install libqwtplot3d-qt4-dev \n    sudo apt-get install libgphoto2-dev \n    sudo apt-get install libexiv2-dev \n    sudo apt-get install libopencv-dev \n    sudo apt-get install pkg-config \n    sudo apt-get install libboost-dev \n    sudo apt-get install libcurl3-nss", 
            "title": "Requirements"
        }, 
        {
            "location": "/build/UbuntuLinux/#building", 
            "text": "Go to the directory to which you checked out the source code and run  ./configure  [options]  with options as described in the  documentation .  Then run  source tkmodlabenv.sh  in case you use  bash  or add the script to your  .bashrc . You should\nnow be good to go and build the software by running  make", 
            "title": "Building"
        }, 
        {
            "location": "/build/RaspbianLinux/", 
            "text": "Build Instructions for Raspbian Linux (Jessie)\n\n\nRequirements\n\n\nThe software relies on package version not available in a standard Ubuntu installation.\nIn order to get the latest versions of the installed packages edit the file\n\nsudo pico /etc/apt/sources.list\n and add the line\n\n\ndeb http://archive.raspbian.org/raspbian/ testing main contrib non-free rpi\n\n\nto its end. After that execute\n\n\nsudo apt-get update\n\n   \nsudo apt-get upgrade\n\n\non the command line. You can now install the required packages via\n\n\nsudo apt-get install git\n\n   \nsudo apt-get install cmake\n\n   \nsudo apt-get install root-system\n\n   \nsudo apt-get install gcc\n\n   \nsudo apt-get install locate\n\n   \nsudo apt-get install libqt4-dev\n\n   \nsudo apt-get install libqwt-dev\n\n   \nsudo apt-get install libqwtplot3d-qt4-dev\n\n   \nsudo apt-get install libgphoto2-dev\n\n   \nsudo apt-get install libexiv2-dev\n\n   \nsudo apt-get install libopencv-dev\n\n   \nsudo apt-get install pkg-config\n\n   \nsudo apt-get install libboost-dev\n\n   \nsudo apt-get install libcurl3-nss\n\n\nBuilding\n\n\nGo to the directory to which you checked out the source code and run\n\n\n./configure\n [options]\n\n\nwith options as described in the \ndocumentation\n.\n\n\nThen run\n\n\nsource tkmodlabenv.sh\n\n\nin case you use \nbash\n or add the script to your \n.bashrc\n. You should\nnow be good to go and build the software by running\n\n\nmake", 
            "title": "Raspbian Linux"
        }, 
        {
            "location": "/build/RaspbianLinux/#build-instructions-for-raspbian-linux-jessie", 
            "text": "", 
            "title": "Build Instructions for Raspbian Linux (Jessie)"
        }, 
        {
            "location": "/build/RaspbianLinux/#requirements", 
            "text": "The software relies on package version not available in a standard Ubuntu installation.\nIn order to get the latest versions of the installed packages edit the file sudo pico /etc/apt/sources.list  and add the line  deb http://archive.raspbian.org/raspbian/ testing main contrib non-free rpi  to its end. After that execute  sudo apt-get update \n    sudo apt-get upgrade  on the command line. You can now install the required packages via  sudo apt-get install git \n    sudo apt-get install cmake \n    sudo apt-get install root-system \n    sudo apt-get install gcc \n    sudo apt-get install locate \n    sudo apt-get install libqt4-dev \n    sudo apt-get install libqwt-dev \n    sudo apt-get install libqwtplot3d-qt4-dev \n    sudo apt-get install libgphoto2-dev \n    sudo apt-get install libexiv2-dev \n    sudo apt-get install libopencv-dev \n    sudo apt-get install pkg-config \n    sudo apt-get install libboost-dev \n    sudo apt-get install libcurl3-nss", 
            "title": "Requirements"
        }, 
        {
            "location": "/build/RaspbianLinux/#building", 
            "text": "Go to the directory to which you checked out the source code and run  ./configure  [options]  with options as described in the  documentation .  Then run  source tkmodlabenv.sh  in case you use  bash  or add the script to your  .bashrc . You should\nnow be good to go and build the software by running  make", 
            "title": "Building"
        }, 
        {
            "location": "/build/OSXElCapitan/", 
            "text": "Build Instructions for OSX El Capitan\n\n\nRequirements\n\n\nBuilding the software package on OSX El Capitan requires XCode,\nthe XCode Command Line Tools and homebrew to be installed. XCode\nis available from the Apple App Store. The XCode Command Line\nTools can be installed via\n\n\nsudo xcode-select --install\n\n\nInstallation instruction for homebrew can be found on\n\nbrew.sh\n. It can also be installed directly via\n\n\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n\nOnce homebrew is installed, install the following packages\n\n\nbrew install cmake\n\n   \nbrew install gcc\n\n   \nbrew install opencv\n\n   \nbrew install gphoto2\n\n   \nbrew install pkg-config\n\n   \nbrew install exiv2\n\n   \nbrew install qt4\n\n   \nbrew install boost\n\n\nFor some extra libraries and tool ROOT is required. ROOT can also be installed using homebrew via\n\n\nbrew tap homebrew/science\n\n   \nbrew install root6\n\n   \nsource $(brew --prefix root6)/libexec/thisroot.sh\n\n\nYou should add the last line to your \n.bashrc\n in order to load the settings for ROOT\nevery time a terminal is opened.\n\n\nBuilding\n\n\nGo to the directory to which you checked out the source code and run\n\n\n./configure\n [options]\n\n\nwith options as described in the \ndocumentation\n.\nPlease note that in the case of OSX, the option \n--fake\n is\nforced.\n\n\nThen run\n\n\nsource tkmodlabenv.sh\n\n\nin case you use \nbash\n or add the script to your \n.bashrc\n. You should\nnow be good to go and build the software by running\n\n\nmake", 
            "title": "OSX El Capitan"
        }, 
        {
            "location": "/build/OSXElCapitan/#build-instructions-for-osx-el-capitan", 
            "text": "", 
            "title": "Build Instructions for OSX El Capitan"
        }, 
        {
            "location": "/build/OSXElCapitan/#requirements", 
            "text": "Building the software package on OSX El Capitan requires XCode,\nthe XCode Command Line Tools and homebrew to be installed. XCode\nis available from the Apple App Store. The XCode Command Line\nTools can be installed via  sudo xcode-select --install  Installation instruction for homebrew can be found on brew.sh . It can also be installed directly via  /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"  Once homebrew is installed, install the following packages  brew install cmake \n    brew install gcc \n    brew install opencv \n    brew install gphoto2 \n    brew install pkg-config \n    brew install exiv2 \n    brew install qt4 \n    brew install boost  For some extra libraries and tool ROOT is required. ROOT can also be installed using homebrew via  brew tap homebrew/science \n    brew install root6 \n    source $(brew --prefix root6)/libexec/thisroot.sh  You should add the last line to your  .bashrc  in order to load the settings for ROOT\nevery time a terminal is opened.", 
            "title": "Requirements"
        }, 
        {
            "location": "/build/OSXElCapitan/#building", 
            "text": "Go to the directory to which you checked out the source code and run  ./configure  [options]  with options as described in the  documentation .\nPlease note that in the case of OSX, the option  --fake  is\nforced.  Then run  source tkmodlabenv.sh  in case you use  bash  or add the script to your  .bashrc . You should\nnow be good to go and build the software by running  make", 
            "title": "Building"
        }, 
        {
            "location": "/thermo/thermoDAQ/", 
            "text": "", 
            "title": "thermoDAQ"
        }, 
        {
            "location": "/defo/defoDAQ/", 
            "text": "", 
            "title": "defoDAQ"
        }, 
        {
            "location": "/defo/defoDAQScripting/", 
            "text": "defoDAQ Scripting\n\n\ndefo\n\n\n\n\n\n\ndefo.wait(int delay);\n\npause execution of script for delay seconds\n\n\n\n\n\n\ndefo.message(message);\n\nprint a message to the message log. Message can be of type int, uint, double\nor string.\n\n\n\n\n\n\ndefo.newMeasurement();\n\nprepare DAQ for a new measurement\n\n\n\n\n\n\nuint defo.uTime();\n\nreturns the current unix time\n\n\n\n\n\n\nuint defo.mkUTime( int year, int month, int day, int hour, int minute, int second );\n\nconstructs and returns a unix time from the provided parameters.\n\n\n\n\n\n\nkeithley\n\n\n\n\n\n\nint keithley.state( uint channel = [0,9] );\n\nreturns the state of a sensor.\n\n\n\n\n\n\ndouble keithley.temperature( uint channel = [0,9] );\n\nreturns the temperature reading of a sensor.\n\n\n\n\n\n\nstring keithley.temperatureAsString( uint channel = [0,9] );\n\nreturns the temperature reading of a sensor as a string.\n\n\n\n\n\n\nkeithley.waitForStableTemperature( string channels, int timeout );\n\nwait for stable temperatures on the selected channels. wait at most\ntimeout seconds. Channels are to be provided as 'space' separated list\nof integers.\n\n\n\n\n\n\nkeithley.waitForTemperatureBelow( uint channel= [0,9], float temperature, int timeout )\n\nwait for the temperature reading of a channel to be above a certain\ntemperature. Wait at most timeout seconds.\n\n\n\n\n\n\nkeithley.waitForTemperatureAbove( uint channel= [0,9] , float temperature, int timeout )\n\nwait for the temperature reading of a channel to be above a certain\ntemperature. Wait at most timeout seconds.\n\n\n\n\n\n\nconrad\n\n\n\n\n\n\nconrad.enablePanel( uint panel = [1,5] )\n\nswitches on a panel.\n\n\n\n\n\n\nconrad.disablePanel( uint panel = [1,5] )\n\nswitches off a panel.\n\n\n\n\n\n\nint conrad.panelState( uint panel = [1,5] )\n\nreturns the status of a panel.\n\n\n\n\n\n\nconrad.enableCalibrationLEDs()\n\nswitches on the calibration LEDs\n\n\n\n\n\n\nconrad.disableCalibrationLEDs()\n\nswitches off the calibration LEDs\n\n\n\n\n\n\nint conrad.calibrationLEDsState()\n\nreturns the status of calibration LEDs\n\n\n\n\n\n\ncamera\n\n\n\n\n\n\ncamera.comment( string text )\n\nsets the comment text for the picture acquisition. the comment text will not be\ncleared after an picture has been taken\n\n\n\n\n\n\ncamera.takePicture()\n\ntake a new picture\n\n\n\n\n\n\ncamera.setNumberOfPictures(int count = [1,5] )\n\nchanges the number of pictures taken per measurement\n\n\n\n\n\n\nint camera.numberOfPictures()\n\nreturns the number of pictures taken per measurement\n\n\n\n\n\n\njulabo\n\n\n\n\n\n\njulabo.enableCirculator()\n\nswitches circulator on\n\n\n\n\n\n\njulabo.disableCirculator()\n\nswitches circulator off\n\n\n\n\n\n\nint julabo.circulatorState()\n\nreturns the state of the circulator\n\n\n\n\n\n\njulabo.setWorkingTemperature( double temperature = [-50,30] )\n\nset the working temperature\n\n\n\n\n\n\njulabo.workingTemperature()\n\nreturns the working temperature\n\n\n\n\n\n\njulabo.bath()\n\nreturns the bath temperature\n\n\n\n\n\n\njulabo.safety()\n\nreturns the safety temperature\n\n\n\n\n\n\njulabo.setP( double xp = [0.1,99.9] )\n\nset new proportional PID controller parameter\n\n\n\n\n\n\njulabo.setI( int tn = [3,9999] )\n\nset new integral PID controller parameter\n\n\n\n\n\n\njulabo.setD( int tv = [0,999] )\n\nset new differential PID controller parameter\n\n\n\n\n\n\njulabo.setPID( double xp = [0.1,99.9], int tn = [3,9999], int tv = [0,999] )\n\nset new PID controller parameters\n\n\n\n\n\n\ndouble julabo.getP()\n\nreturns proportional PID controller parameter\n\n\n\n\n\n\nint julabo.getI()\n\nreturns integral PID controller parameter\n\n\n\n\n\n\nint julabo.getD()\n\nreturns differential PID controller parameter\n\n\n\n\n\n\njulabo.setPumpPressure( uint pressure = [1,4] )\n\nchanges the pump pressure\n\n\n\n\n\n\nuint julabo.pumpPressure()\n\nreturns the pump pressure", 
            "title": "defoDAQ Scripting"
        }, 
        {
            "location": "/defo/defoDAQScripting/#defodaq-scripting", 
            "text": "", 
            "title": "defoDAQ Scripting"
        }, 
        {
            "location": "/defo/defoDAQScripting/#defo", 
            "text": "defo.wait(int delay); \npause execution of script for delay seconds    defo.message(message); \nprint a message to the message log. Message can be of type int, uint, double\nor string.    defo.newMeasurement(); \nprepare DAQ for a new measurement    uint defo.uTime(); \nreturns the current unix time    uint defo.mkUTime( int year, int month, int day, int hour, int minute, int second ); \nconstructs and returns a unix time from the provided parameters.", 
            "title": "defo"
        }, 
        {
            "location": "/defo/defoDAQScripting/#keithley", 
            "text": "int keithley.state( uint channel = [0,9] ); \nreturns the state of a sensor.    double keithley.temperature( uint channel = [0,9] ); \nreturns the temperature reading of a sensor.    string keithley.temperatureAsString( uint channel = [0,9] ); \nreturns the temperature reading of a sensor as a string.    keithley.waitForStableTemperature( string channels, int timeout ); \nwait for stable temperatures on the selected channels. wait at most\ntimeout seconds. Channels are to be provided as 'space' separated list\nof integers.    keithley.waitForTemperatureBelow( uint channel= [0,9], float temperature, int timeout ) \nwait for the temperature reading of a channel to be above a certain\ntemperature. Wait at most timeout seconds.    keithley.waitForTemperatureAbove( uint channel= [0,9] , float temperature, int timeout ) \nwait for the temperature reading of a channel to be above a certain\ntemperature. Wait at most timeout seconds.", 
            "title": "keithley"
        }, 
        {
            "location": "/defo/defoDAQScripting/#conrad", 
            "text": "conrad.enablePanel( uint panel = [1,5] ) \nswitches on a panel.    conrad.disablePanel( uint panel = [1,5] ) \nswitches off a panel.    int conrad.panelState( uint panel = [1,5] ) \nreturns the status of a panel.    conrad.enableCalibrationLEDs() \nswitches on the calibration LEDs    conrad.disableCalibrationLEDs() \nswitches off the calibration LEDs    int conrad.calibrationLEDsState() \nreturns the status of calibration LEDs", 
            "title": "conrad"
        }, 
        {
            "location": "/defo/defoDAQScripting/#camera", 
            "text": "camera.comment( string text ) \nsets the comment text for the picture acquisition. the comment text will not be\ncleared after an picture has been taken    camera.takePicture() \ntake a new picture    camera.setNumberOfPictures(int count = [1,5] ) \nchanges the number of pictures taken per measurement    int camera.numberOfPictures() \nreturns the number of pictures taken per measurement", 
            "title": "camera"
        }, 
        {
            "location": "/defo/defoDAQScripting/#julabo", 
            "text": "julabo.enableCirculator() \nswitches circulator on    julabo.disableCirculator() \nswitches circulator off    int julabo.circulatorState() \nreturns the state of the circulator    julabo.setWorkingTemperature( double temperature = [-50,30] ) \nset the working temperature    julabo.workingTemperature() \nreturns the working temperature    julabo.bath() \nreturns the bath temperature    julabo.safety() \nreturns the safety temperature    julabo.setP( double xp = [0.1,99.9] ) \nset new proportional PID controller parameter    julabo.setI( int tn = [3,9999] ) \nset new integral PID controller parameter    julabo.setD( int tv = [0,999] ) \nset new differential PID controller parameter    julabo.setPID( double xp = [0.1,99.9], int tn = [3,9999], int tv = [0,999] ) \nset new PID controller parameters    double julabo.getP() \nreturns proportional PID controller parameter    int julabo.getI() \nreturns integral PID controller parameter    int julabo.getD() \nreturns differential PID controller parameter    julabo.setPumpPressure( uint pressure = [1,4] ) \nchanges the pump pressure    uint julabo.pumpPressure() \nreturns the pump pressure", 
            "title": "julabo"
        }, 
        {
            "location": "/", 
            "text": "", 
            "title": "Assembly"
        }
    ]
}