#ifndef APPLICATIONCONFIG_H
#define APPLICATIONCONFIG_H

#include <string>
#include <sstream>
#include <map>

#include <QObject>
#include <QVariant>
#include <QMessageBox>

namespace Config {
  extern const std::string CMSTkModLabBasePath;
}

class ApplicationConfig
{  
public:
  
  static ApplicationConfig* instance(const std::string filename = std::string());
  
  template <class aType> aType getValue(std::string const& key) const {
    aType returnValue = 0;
    std::map<std::string,std::string>::const_iterator it = keyvalueMap_.find(key);
    if (it!=keyvalueMap_.end()) {
      std::istringstream iss(it->second.c_str(), std::istringstream::in);
      iss >> returnValue;
    } else {
      issueKeyError(key);
    }
    return returnValue;
  }
  
  template <class aType> aType getValue(std::string const& key, aType defaultValue) const {
    aType returnValue = 0;
    std::map<std::string,std::string>::const_iterator it = keyvalueMap_.find(key);
    if (it!=keyvalueMap_.end()) {
      std::istringstream iss(it->second.c_str(), std::istringstream::in);
      iss >> returnValue;
    } else {
      returnValue = defaultValue;
    }
    return returnValue;
  }
  
  std::string getValue(std::string const& key) const {
    std::map<std::string,std::string>::const_iterator it = keyvalueMap_.find(key);
    if (it!=keyvalueMap_.end()) {
      return it->second;
    } else {
      issueKeyError(key);
    }
    return std::string();
  }
  
  std::string getValue(std::string const& key, std::string defaultValue) const {
    std::map<std::string,std::string>::const_iterator it = keyvalueMap_.find(key);
    if (it!=keyvalueMap_.end()) {
      return it->second;
    } else {
      return defaultValue;
    }
  }
  
  template <class aType> void setValue(std::string const& key, aType value) {
    QVariant variant(value);
    keyvalueMap_[key] = variant.toString().toStdString();
  }
  
  void safe(const std::string filename);
  
protected:
  
  ApplicationConfig(const std::string filename);
  static ApplicationConfig* instance_;
  
  void issueKeyError(const std::string&) const;
  
  std::map<std::string,std::string> keyvalueMap_;
};

template <> std::string ApplicationConfig::getValue(std::string const& key) const;
template <> std::string ApplicationConfig::getValue(std::string const& key, std::string defaultValue) const;

#endif // APPLICATIONCONFIG_H
